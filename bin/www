#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('site:server');
var http = require('http');
var httpProxy = require('http-proxy');
var jwt = require('jsonwebtoken');
var cookieParser = require('cookie-parser');
var User = require('../models/users');
var proxy = httpProxy.createProxyServer({
  ws: true,
});

//Verify a JWT
function verifyJWT(jwtString){
  var value = jwt.verify(jwtString, 'insertmessagehere');
  return value;
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);

function parseCookies (request) {
  var list = {},
      rc = request.headers.cookie;

  rc && rc.split(';').forEach(function( cookie ) {
      var parts = cookie.split('=');
      list[parts.shift().trim()] = decodeURI(parts.join('='));
  });

  return list;
}

server.on('upgrade', function(req, res) {
  console.log(parseCookies(req).Authorization);
  try {
    var jwtString = parseCookies(req).Authorization.split(" ");
    var profile = verifyJWT(jwtString[1]);
    
    if (profile) {
      console.log(profile);
      User.findOne({user_name: profile.user_name}, function(err, user){
        if(err){
          res.send(404);
          return;
        }
        console.log(user.port);
        proxy.ws(req, res, {target: 'ws://127.0.0.1:'+user.port}, function(e){
    console.log(e.message);
  });
      });
      
    }
  } catch (err) {
    
  }
  
});
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
